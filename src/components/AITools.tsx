import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';

const AITools = () => {
  const [translatorText, setTranslatorText] = useState('');
  const [translatedText, setTranslatedText] = useState('');
  const [targetLang, setTargetLang] = useState('en');
  const [sourceLang, setSourceLang] = useState('auto');
  const [loading, setLoading] = useState(false);

  const [ttsText, setTtsText] = useState('');
  const [ttsLang, setTtsLang] = useState('ru-RU');
  const [audioUrl, setAudioUrl] = useState('');

  const [summaryText, setSummaryText] = useState('');
  const [summaryResult, setSummaryResult] = useState('');
  const [summaryLength, setSummaryLength] = useState('medium');

  const [sentimentText, setSentimentText] = useState('');
  const [sentimentResult, setSentimentResult] = useState<any>(null);

  const languages = [
    { code: 'auto', name: '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
    { code: 'en', name: 'English' },
    { code: 'es', name: 'Espa√±ol' },
    { code: 'fr', name: 'Fran√ßais' },
    { code: 'de', name: 'Deutsch' },
    { code: 'zh', name: '‰∏≠Êñá' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û' },
    { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥' }
  ];

  const handleTranslate = async () => {
    if (!translatorText.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('https://functions.poehali.dev/ai-tools', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          tool: 'translate',
          text: translatorText,
          params: {
            target_lang: targetLang,
            source_lang: sourceLang
          }
        })
      });

      const data = await response.json();
      setTranslatedText(data.result);
      toast.success('–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω!');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleTextToSpeech = async () => {
    if (!ttsText.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('https://functions.poehali.dev/ai-tools', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          tool: 'tts',
          text: ttsText,
          params: {
            lang: ttsLang
          }
        })
      });

      const data = await response.json();
      const audio = `data:audio/mp3;base64,${data.result}`;
      setAudioUrl(audio);
      toast.success('–ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ!');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ');
    } finally {
      setLoading(false);
    }
  };

  const handleSummarize = async () => {
    if (!summaryText.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('https://functions.poehali.dev/ai-tools', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          tool: 'summarize',
          text: summaryText,
          params: {
            length: summaryLength
          }
        })
      });

      const data = await response.json();
      setSummaryResult(data.result);
      toast.success('–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const handleSentiment = async () => {
    if (!sentimentText.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('https://functions.poehali.dev/ai-tools', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          tool: 'sentiment',
          text: sentimentText
        })
      });

      const data = await response.json();
      setSentimentResult(data.result);
      toast.success('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="pt-24 pb-12 px-6 min-h-screen">
      <div className="container mx-auto max-w-7xl">
        <div className="mb-8 animate-fade-in">
          <h1 className="text-4xl font-black text-white mb-2">üõ†Ô∏è –ò–ò –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h1>
          <p className="text-gray-400">–ú–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</p>
        </div>

        <Tabs defaultValue="translator" className="space-y-6">
          <TabsList className="bg-slate-900 border border-slate-700 flex-wrap h-auto">
            <TabsTrigger value="translator" className="data-[state=active]:bg-indigo-600">
              <Icon name="Languages" size={16} className="mr-2" />
              –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
            </TabsTrigger>
            <TabsTrigger value="tts" className="data-[state=active]:bg-indigo-600">
              <Icon name="Volume2" size={16} className="mr-2" />
              –û–∑–≤—É—á–∫–∞
            </TabsTrigger>
            <TabsTrigger value="summary" className="data-[state=active]:bg-indigo-600">
              <Icon name="FileText" size={16} className="mr-2" />
              –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            </TabsTrigger>
            <TabsTrigger value="sentiment" className="data-[state=active]:bg-indigo-600">
              <Icon name="Smile" size={16} className="mr-2" />
              –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            </TabsTrigger>
          </TabsList>

          <TabsContent value="translator">
            <Card className="p-8 bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700">
              <div className="flex items-center gap-3 mb-6">
                <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
                  <Icon name="Languages" size={24} className="text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ–∫—Å—Ç–∞</h3>
                  <p className="text-gray-400 text-sm">–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ 50+ —è–∑—ã–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-4 mb-6">
                <div>
                  <label className="text-white text-sm mb-2 block">–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫</label>
                  <Select value={sourceLang} onValueChange={setSourceLang}>
                    <SelectTrigger className="bg-slate-800 border-slate-700 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {languages.map(lang => (
                        <SelectItem key={lang.code} value={lang.code}>{lang.name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-white text-sm mb-2 block">–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫</label>
                  <Select value={targetLang} onValueChange={setTargetLang}>
                    <SelectTrigger className="bg-slate-800 border-slate-700 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {languages.filter(l => l.code !== 'auto').map(lang => (
                        <SelectItem key={lang.code} value={lang.code}>{lang.name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-4">
                <Textarea
                  value={translatorText}
                  onChange={(e) => setTranslatorText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞..."
                  className="bg-slate-800 border-slate-700 text-white min-h-[150px]"
                />
                
                <Button 
                  onClick={handleTranslate} 
                  disabled={loading}
                  className="bg-indigo-600 hover:bg-indigo-700 w-full"
                >
                  {loading ? '–ü–µ—Ä–µ–≤–æ–¥...' : '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏'}
                </Button>

                {translatedText && (
                  <div className="p-4 rounded-lg bg-slate-800/50 border border-slate-700">
                    <label className="text-white text-sm mb-2 block font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç:</label>
                    <p className="text-white">{translatedText}</p>
                  </div>
                )}
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="tts">
            <Card className="p-8 bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700">
              <div className="flex items-center gap-3 mb-6">
                <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                  <Icon name="Volume2" size={24} className="text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞</h3>
                  <p className="text-gray-400 text-sm">–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å</p>
                </div>
              </div>

              <div className="mb-4">
                <label className="text-white text-sm mb-2 block">–Ø–∑—ã–∫ –æ–∑–≤—É—á–∫–∏</label>
                <Select value={ttsLang} onValueChange={setTtsLang}>
                  <SelectTrigger className="bg-slate-800 border-slate-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ru-RU">–†—É—Å—Å–∫–∏–π</SelectItem>
                    <SelectItem value="en-US">English (US)</SelectItem>
                    <SelectItem value="en-GB">English (UK)</SelectItem>
                    <SelectItem value="es-ES">Espa√±ol</SelectItem>
                    <SelectItem value="fr-FR">Fran√ßais</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-4">
                <Textarea
                  value={ttsText}
                  onChange={(e) => setTtsText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏..."
                  className="bg-slate-800 border-slate-700 text-white min-h-[150px]"
                />
                
                <Button 
                  onClick={handleTextToSpeech} 
                  disabled={loading}
                  className="bg-purple-600 hover:bg-purple-700 w-full"
                >
                  {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ...' : '–û–∑–≤—É—á–∏—Ç—å'}
                </Button>

                {audioUrl && (
                  <div className="p-4 rounded-lg bg-slate-800/50 border border-slate-700">
                    <label className="text-white text-sm mb-2 block font-semibold">–ê—É–¥–∏–æ:</label>
                    <audio controls src={audioUrl} className="w-full" />
                  </div>
                )}
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="summary">
            <Card className="p-8 bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700">
              <div className="flex items-center gap-3 mb-6">
                <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-emerald-500 to-teal-500 flex items-center justify-center">
                  <Icon name="FileText" size={24} className="text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
                  <p className="text-gray-400 text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞</p>
                </div>
              </div>

              <div className="mb-4">
                <label className="text-white text-sm mb-2 block">–î–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ</label>
                <Select value={summaryLength} onValueChange={setSummaryLength}>
                  <SelectTrigger className="bg-slate-800 border-slate-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="short">–ö–æ—Ä–æ—Ç–∫–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)</SelectItem>
                    <SelectItem value="medium">–°—Ä–µ–¥–Ω–µ–µ (5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)</SelectItem>
                    <SelectItem value="long">–î–ª–∏–Ω–Ω–æ–µ (10-15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-4">
                <Textarea
                  value={summaryText}
                  onChange={(e) => setSummaryText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è..."
                  className="bg-slate-800 border-slate-700 text-white min-h-[200px]"
                />
                
                <Button 
                  onClick={handleSummarize} 
                  disabled={loading}
                  className="bg-emerald-600 hover:bg-emerald-700 w-full"
                >
                  {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ'}
                </Button>

                {summaryResult && (
                  <div className="p-4 rounded-lg bg-slate-800/50 border border-slate-700">
                    <label className="text-white text-sm mb-2 block font-semibold">–†–µ–∑—é–º–µ:</label>
                    <p className="text-white">{summaryResult}</p>
                  </div>
                )}
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="sentiment">
            <Card className="p-8 bg-gradient-to-br from-slate-900 to-slate-800 border-slate-700">
              <div className="flex items-center gap-3 mb-6">
                <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-amber-500 to-orange-500 flex items-center justify-center">
                  <Icon name="Smile" size={24} className="text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</h3>
                  <p className="text-gray-400 text-sm">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞ —Ç–µ–∫—Å—Ç–∞</p>
                </div>
              </div>

              <div className="space-y-4">
                <Textarea
                  value={sentimentText}
                  onChange={(e) => setSentimentText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π..."
                  className="bg-slate-800 border-slate-700 text-white min-h-[150px]"
                />
                
                <Button 
                  onClick={handleSentiment} 
                  disabled={loading}
                  className="bg-amber-600 hover:bg-amber-700 w-full"
                >
                  {loading ? '–ê–Ω–∞–ª–∏–∑...' : '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
                </Button>

                {sentimentResult && (
                  <div className="p-6 rounded-lg bg-slate-800/50 border border-slate-700 space-y-4">
                    <div className="flex items-center gap-3">
                      <div className={`px-4 py-2 rounded-full font-bold ${
                        sentimentResult.sentiment === 'positive' ? 'bg-green-500/20 text-green-400' :
                        sentimentResult.sentiment === 'negative' ? 'bg-red-500/20 text-red-400' :
                        'bg-gray-500/20 text-gray-400'
                      }`}>
                        {sentimentResult.sentiment === 'positive' ? 'üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ' :
                         sentimentResult.sentiment === 'negative' ? 'üòû –ù–µ–≥–∞—Ç–∏–≤–Ω–æ' :
                         'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}
                      </div>
                      <div className="text-white font-mono">
                        –û—Ü–µ–Ω–∫–∞: {(sentimentResult.score * 100).toFixed(0)}%
                      </div>
                    </div>
                    
                    {sentimentResult.emotions && sentimentResult.emotions.length > 0 && (
                      <div>
                        <label className="text-white text-sm mb-2 block font-semibold">–≠–º–æ—Ü–∏–∏:</label>
                        <div className="flex flex-wrap gap-2">
                          {sentimentResult.emotions.map((emotion: string, idx: number) => (
                            <span key={idx} className="px-3 py-1 rounded-full bg-slate-700 text-gray-300 text-sm">
                              {emotion}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                    <div>
                      <label className="text-white text-sm mb-2 block font-semibold">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</label>
                      <p className="text-gray-300">{sentimentResult.explanation}</p>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default AITools;