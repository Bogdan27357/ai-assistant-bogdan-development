import { useState } from 'react';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { Language, getTranslations } from '@/lib/i18n';
import { useVoice } from '@/hooks/useVoice';
import { useChatLogic } from '@/components/chat/useChatLogic';
import ChatHeader from '@/components/chat/ChatHeader';
import ChatMessages from '@/components/chat/ChatMessages';
import ChatInput from '@/components/chat/ChatInput';

interface ChatInterfaceProps {
  onNavigateToAdmin?: () => void;
  language?: Language;
}

const ChatInterface = ({ onNavigateToAdmin, language = 'ru' }: ChatInterfaceProps) => {
  const [activeModel, setActiveModel] = useState('auto');
  const { voiceEnabled, speak, toggleVoice } = useVoice();
  const t = getTranslations(language).chat;

  const availableModels = [
    { id: 'auto', name: 'ü§ñ –£–º–Ω—ã–π —Ä–µ–∂–∏–º', icon: 'Wand2', color: 'from-gradient-start to-gradient-end', description: '–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏', category: 'main' },
    
    { id: 'gemini', name: '‚ö° –ë—ã—Å—Ç—Ä—ã–π', icon: 'Zap', color: 'from-blue-500 to-cyan-500', description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', category: 'text' },
    { id: 'deepseek', name: 'üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', icon: 'Code', color: 'from-violet-500 to-purple-500', description: '–ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º, –æ—Ç–ª–∞–¥–∫–æ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π', category: 'text' },
    { id: 'claude', name: '‚úçÔ∏è –¢–≤–æ—Ä–µ—Ü', icon: 'Feather', color: 'from-amber-500 to-orange-500', description: '–¢–µ–∫—Å—Ç—ã, –∏—Å—Ç–æ—Ä–∏–∏, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Å—å–º–æ', category: 'text' },
    { id: 'llama', name: 'üß† –õ–æ–≥–∏–∫', icon: 'Brain', color: 'from-purple-500 to-pink-500', description: '–°–ª–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑', category: 'text' },
    { id: 'qwen', name: 'üåè –ü–æ–ª–∏–≥–ª–æ—Ç', icon: 'Languages', color: 'from-orange-500 to-red-500', description: '–ü–µ—Ä–µ–≤–æ–¥—ã –∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', category: 'text' },
    { id: 'mistral', name: '‚öñÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª', icon: 'Scale', color: 'from-cyan-500 to-blue-500', description: '–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞', category: 'text' },
    
    { id: 'gemini-vision', name: 'üëÅÔ∏è –í–∏–∑–æ—Ä-1', icon: 'Eye', color: 'from-blue-400 to-indigo-500', description: '–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', category: 'vision' },
    { id: 'llama-vision', name: 'üì∏ –í–∏–∑–æ—Ä-2', icon: 'Camera', color: 'from-purple-400 to-pink-500', description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ', category: 'vision' },
    { id: 'qwen-vision', name: 'üîç –í–∏–∑–æ—Ä-3', icon: 'ScanEye', color: 'from-orange-400 to-red-500', description: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫', category: 'vision' },
    
    { id: 'flux', name: 'üé® –•—É–¥–æ–∂–Ω–∏–∫-1', icon: 'Palette', color: 'from-pink-500 to-rose-500', description: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', category: 'image-gen' },
    { id: 'dalle', name: 'üñåÔ∏è –•—É–¥–æ–∂–Ω–∏–∫-2', icon: 'Paintbrush', color: 'from-green-500 to-emerald-500', description: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫', category: 'image-gen' },
  ];

  const {
    messages,
    input,
    isLoading,
    uploadedFiles,
    messagesEndRef,
    fileInputRef,
    setInput,
    handleFileUpload,
    removeFile,
    handleSend,
    exportChat,
    copyMessage,
    clearMessages,
    startNewChat,
  } = useChatLogic(activeModel, voiceEnabled, speak, t);

  return (
    <div className="pt-24 pb-12 px-6 min-h-screen">
      <div className="container mx-auto max-w-5xl space-y-4">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */}
        <Card className="bg-gradient-to-br from-indigo-900/40 to-purple-900/40 border-indigo-500/30 backdrop-blur-xl p-6">
          <div className="flex items-start gap-4">
            <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center flex-shrink-0">
              <Icon name="Info" size={24} className="text-white" />
            </div>
            <div className="flex-1">
              <h3 className="text-xl font-bold text-white mb-2">ü§ñ 12 AI –º–æ–¥–µ–ª–µ–π –≤ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</h3>
              <p className="text-sm text-gray-300 mb-3">
                –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á: –¥–∏–∞–ª–æ–≥–∏, –∫–æ–¥, –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ
              </p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
                <div className="flex items-center gap-2 text-gray-300">
                  <Icon name="CheckCircle" size={14} className="text-green-400" />
                  <span>–£–º–Ω—ã–π –∞–≤—Ç–æ–≤—ã–±–æ—Ä</span>
                </div>
                <div className="flex items-center gap-2 text-gray-300">
                  <Icon name="CheckCircle" size={14} className="text-green-400" />
                  <span>6 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π</span>
                </div>
                <div className="flex items-center gap-2 text-gray-300">
                  <Icon name="CheckCircle" size={14} className="text-green-400" />
                  <span>3 –≤–∏–∑–æ—Ä-–º–æ–¥–µ–ª–∏</span>
                </div>
                <div className="flex items-center gap-2 text-gray-300">
                  <Icon name="CheckCircle" size={14} className="text-green-400" />
                  <span>2 —Ö—É–¥–æ–∂–Ω–∏–∫–∞</span>
                </div>
              </div>
            </div>
          </div>
        </Card>

        {/* –í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏ */}
        <Card className="bg-gradient-to-br from-slate-900/95 to-slate-800/95 border-slate-700/50 backdrop-blur-xl p-4">
          <div className="flex items-center justify-between gap-3 mb-3">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center">
                <Icon name="Cpu" size={20} className="text-white" />
              </div>
              <div>
                <h3 className="text-white font-semibold">–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã</h3>
                <p className="text-xs text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å –ò–ò</p>
              </div>
            </div>
            {activeModel === 'auto' && (
              <div className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-indigo-500/20 border border-indigo-500/30">
                <Icon name="Wand2" size={16} className="text-indigo-400" />
                <span className="text-xs font-semibold text-indigo-300">–£–º–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω</span>
              </div>
            )}
          </div>
          
          <div className="space-y-4">
            {/* –ê–≤—Ç–æ-–≤—ã–±–æ—Ä */}
            <div>
              <h4 className="text-xs font-semibold text-gray-400 mb-2 flex items-center gap-2">
                <Icon name="Wand2" size={12} />
                –£–º–Ω—ã–π —Ä–µ–∂–∏–º
              </h4>
              <div className="grid grid-cols-1 gap-2">
                {availableModels.filter(m => m.category === 'main').map((model) => (
                  <button
                    key={model.id}
                    onClick={() => setActiveModel(model.id)}
                    className={`p-3 rounded-xl border-2 transition-all ${
                      activeModel === model.id
                        ? 'border-indigo-500 bg-indigo-500/20'
                        : 'border-slate-700 bg-slate-800/50 hover:border-slate-600'
                    }`}
                    title={model.description}
                  >
                    <div className="flex items-center gap-3">
                      <div className={`w-10 h-10 rounded-lg bg-gradient-to-br ${model.color} flex items-center justify-center`}>
                        <Icon name={model.icon as any} size={20} className="text-white" />
                      </div>
                      <div className="flex-1 text-left">
                        <p className="text-sm font-semibold text-white">{model.name}</p>
                        <p className="text-xs text-gray-400">{model.description}</p>
                      </div>
                      {activeModel === model.id && (
                        <Icon name="CheckCircle" size={18} className="text-indigo-400" />
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ */}
            <div>
              <h4 className="text-xs font-semibold text-gray-400 mb-2 flex items-center gap-2">
                <Icon name="MessageSquare" size={12} />
                üí¨ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏
              </h4>
              <div className="grid grid-cols-3 md:grid-cols-6 gap-2">
                {availableModels.filter(m => m.category === 'text').map((model) => (
                  <button
                    key={model.id}
                    onClick={() => setActiveModel(model.id)}
                    className={`p-2.5 rounded-xl border-2 transition-all ${
                      activeModel === model.id
                        ? 'border-indigo-500 bg-indigo-500/20'
                        : 'border-slate-700 bg-slate-800/50 hover:border-slate-600'
                    }`}
                    title={model.description}
                  >
                    <div className={`w-8 h-8 mx-auto mb-1.5 rounded-lg bg-gradient-to-br ${model.color} flex items-center justify-center`}>
                      <Icon name={model.icon as any} size={16} className="text-white" />
                    </div>
                    <p className="text-xs font-semibold text-white text-center">{model.name}</p>
                  </button>
                ))}
              </div>
            </div>

            {/* Vision –º–æ–¥–µ–ª–∏ */}
            <div>
              <h4 className="text-xs font-semibold text-gray-400 mb-2 flex items-center gap-2">
                <Icon name="Eye" size={12} />
                üëÅÔ∏è –í–∏–∑–æ—Ä-–º–æ–¥–µ–ª–∏ (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ)
              </h4>
              <div className="grid grid-cols-3 gap-2">
                {availableModels.filter(m => m.category === 'vision').map((model) => (
                  <button
                    key={model.id}
                    onClick={() => setActiveModel(model.id)}
                    className={`p-2.5 rounded-xl border-2 transition-all ${
                      activeModel === model.id
                        ? 'border-indigo-500 bg-indigo-500/20'
                        : 'border-slate-700 bg-slate-800/50 hover:border-slate-600'
                    }`}
                    title={model.description}
                  >
                    <div className={`w-8 h-8 mx-auto mb-1.5 rounded-lg bg-gradient-to-br ${model.color} flex items-center justify-center`}>
                      <Icon name={model.icon as any} size={16} className="text-white" />
                    </div>
                    <p className="text-xs font-semibold text-white text-center">{model.name}</p>
                  </button>
                ))}
              </div>
            </div>

            {/* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
            <div>
              <h4 className="text-xs font-semibold text-gray-400 mb-2 flex items-center gap-2">
                <Icon name="Palette" size={12} />
                üé® –•—É–¥–æ–∂–Ω–∏–∫–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫)
              </h4>
              <div className="grid grid-cols-2 gap-2">
                {availableModels.filter(m => m.category === 'image-gen').map((model) => (
                  <button
                    key={model.id}
                    onClick={() => setActiveModel(model.id)}
                    className={`p-2.5 rounded-xl border-2 transition-all ${
                      activeModel === model.id
                        ? 'border-indigo-500 bg-indigo-500/20'
                        : 'border-slate-700 bg-slate-800/50 hover:border-slate-600'
                    }`}
                    title={model.description}
                  >
                    <div className={`w-8 h-8 mx-auto mb-1.5 rounded-lg bg-gradient-to-br ${model.color} flex items-center justify-center`}>
                      <Icon name={model.icon as any} size={16} className="text-white" />
                    </div>
                    <p className="text-xs font-semibold text-white text-center">{model.name}</p>
                  </button>
                ))}
              </div>
            </div>


          </div>
        </Card>

        <Card className="bg-gradient-to-br from-slate-900/95 to-slate-800/95 border-slate-700/50 backdrop-blur-xl shadow-2xl overflow-hidden">
          <ChatHeader
            title={t.title}
            subtitle={t.inputPlaceholder.includes('message') ? 'Your intelligent assistant' : '–í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'}
            activeModel={activeModel}
            availableModels={availableModels}
            voiceEnabled={voiceEnabled}
            messagesCount={messages.length}
            translations={t}
            onModelChange={setActiveModel}
            onVoiceToggle={toggleVoice}
            onExport={exportChat}
            onClear={clearMessages}
            onPromptSelect={setInput}
            onNewChat={startNewChat}
          />

          <ChatMessages
            messages={messages}
            isLoading={isLoading}
            translations={t}
            onCopyMessage={copyMessage}
            onNavigateToAdmin={onNavigateToAdmin}
            messagesEndRef={messagesEndRef}
          />

          <ChatInput
            input={input}
            uploadedFiles={uploadedFiles}
            isLoading={isLoading}
            placeholder={t.inputPlaceholder}
            fileInputRef={fileInputRef}
            onInputChange={setInput}
            onSend={handleSend}
            onFileUpload={handleFileUpload}
            onFileRemove={removeFile}
            onFileButtonClick={() => fileInputRef.current?.click()}
          />
        </Card>
      </div>
    </div>
  );
};

export default ChatInterface;