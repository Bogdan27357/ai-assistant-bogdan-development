import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';

const DemoTab = () => {
  const [loading, setLoading] = useState(false);
  const [sentimentText, setSentimentText] = useState('');
  const [sentimentResult, setSentimentResult] = useState('');
  const [codePrompt, setCodePrompt] = useState('');
  const [generatedCode, setGeneratedCode] = useState('');

  const handleImageAnalysis = () => {
    toast.success('–î–µ–º–æ: –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º —á–∞—Ç–µ!', { duration: 3000 });
  };

  const handleDocumentAnalysis = () => {
    toast.success('–î–µ–º–æ: –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º —á–∞—Ç–µ!', { duration: 3000 });
  };

  const handleCodeGeneration = () => {
    if (!codePrompt.trim()) {
      toast.error('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å');
      return;
    }
    
    setLoading(true);
    setTimeout(() => {
      const codeExamples: Record<string, string> = {
        '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞': `def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)`,
        'api': `async function fetchData(url) {
  try {
    const response = await fetch(url);
    if (!response.ok) throw new Error('HTTP error');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
  }
}`,
        'sql': `SELECT u.name, COUNT(o.id) as order_count, SUM(o.total) as revenue
FROM users u
LEFT JOIN orders o ON u.id = o.user_id
WHERE o.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
GROUP BY u.id
ORDER BY revenue DESC
LIMIT 10;`
      };

      const keyword = Object.keys(codeExamples).find(k => 
        codePrompt.toLowerCase().includes(k)
      );

      if (keyword) {
        setGeneratedCode(codeExamples[keyword]);
      } else {
        setGeneratedCode(`# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è: ${codePrompt}\n\ndef solution():\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    pass\n\nif __name__ == "__main__":\n    solution()`);
      }
      
      setLoading(false);
      toast.success('–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç');
    }, 1000);
  };

  const analyzeSentiment = () => {
    if (!sentimentText.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setLoading(true);
    setTimeout(() => {
      const positive = ['–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '—Å—É–ø–µ—Ä', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ª—é–±–ª—é', '—Ä–∞–¥'];
      const negative = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ', '—Ö—É–∂–µ', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–≥—Ä—É—Å—Ç–Ω–æ'];
      
      const text = sentimentText.toLowerCase();
      const positiveCount = positive.filter(w => text.includes(w)).length;
      const negativeCount = negative.filter(w => text.includes(w)).length;

      let sentiment = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π üòê';
      let color = 'text-gray-400';
      let description = '–¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏';

      if (positiveCount > negativeCount) {
        sentiment = '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π üòä';
        color = 'text-green-400';
        description = '–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ';
      } else if (negativeCount > positiveCount) {
        sentiment = '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π üòî';
        color = 'text-red-400';
        description = '–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏';
      }

      setSentimentResult(`${sentiment}\n${description}\n\n–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: ${positiveCount}\n–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: ${negativeCount}`);
      setLoading(false);
      toast.success('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    }, 800);
  };

  return (
    <div className="grid md:grid-cols-2 gap-6">
      <Card className="p-6 bg-gradient-to-br from-slate-900/95 to-slate-800/95 border-slate-700/50 hover:border-indigo-500/50 transition-all">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-cyan-600 flex items-center justify-center">
            <Icon name="Image" size={24} className="text-white" />
          </div>
          <h3 className="text-2xl font-bold text-white">–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h3>
        </div>
        <p className="text-gray-400 mb-4">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è</p>
        <Button onClick={handleImageAnalysis} className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700">
          <Icon name="Upload" size={20} className="mr-2" />
          –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        </Button>
      </Card>

      <Card className="p-6 bg-gradient-to-br from-slate-900/95 to-slate-800/95 border-slate-700/50 hover:border-purple-500/50 transition-all">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center">
            <Icon name="FileText" size={24} className="text-white" />
          </div>
          <h3 className="text-2xl font-bold text-white">–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
        </div>
        <p className="text-gray-400 mb-4">–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏–ª–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏</p>
        <Button onClick={handleDocumentAnalysis} className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700">
          <Icon name="Upload" size={20} className="mr-2" />
          –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        </Button>
      </Card>

      <Card className="p-6 bg-gradient-to-br from-slate-900/95 to-slate-800/95 border-slate-700/50 hover:border-green-500/50 transition-all">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-emerald-500 to-teal-600 flex items-center justify-center">
            <Icon name="Code" size={24} className="text-white" />
          </div>
          <h3 className="text-2xl font-bold text-white">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞</h3>
        </div>
        <p className="text-gray-400 mb-4">–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ Python, JavaScript, SQL –∏–ª–∏ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ</p>
        <Textarea
          value={codePrompt}
          onChange={(e) => setCodePrompt(e.target.value)}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞, API –∑–∞–ø—Ä–æ—Å, SQL –∑–∞–ø—Ä–æ—Å..."
          className="bg-slate-800/50 border-slate-700 text-white mb-3 min-h-[80px]"
        />
        {generatedCode && (
          <pre className="bg-slate-950 border border-slate-700 rounded-lg p-4 mb-3 text-green-400 text-sm overflow-x-auto">
            {generatedCode}
          </pre>
        )}
        <Button onClick={handleCodeGeneration} disabled={loading} className="w-full bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700">
          {loading ? (
            <><Icon name="Loader2" size={20} className="mr-2 animate-spin" />–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</>
          ) : (
            <><Icon name="Terminal" size={20} className="mr-2" />–°–æ–∑–¥–∞—Ç—å –∫–æ–¥</>
          )}
        </Button>
      </Card>

      <Card className="p-6 bg-gradient-to-br from-slate-900/95 to-slate-800/95 border-slate-700/50 hover:border-orange-500/50 transition-all">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-orange-500 to-red-600 flex items-center justify-center">
            <Icon name="MessageSquare" size={24} className="text-white" />
          </div>
          <h3 className="text-2xl font-bold text-white">–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</h3>
        </div>
        <p className="text-gray-400 mb-4">–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Ç–µ–∫—Å—Ç–∞: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</p>
        <Textarea
          value={sentimentText}
          onChange={(e) => setSentimentText(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏..."
          className="bg-slate-800/50 border-slate-700 text-white mb-3 min-h-[80px]"
        />
        {sentimentResult && (
          <div className="bg-slate-950 border border-slate-700 rounded-lg p-4 mb-3 text-gray-300 whitespace-pre-line">
            {sentimentResult}
          </div>
        )}
        <Button onClick={analyzeSentiment} disabled={loading} className="w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700">
          {loading ? (
            <><Icon name="Loader2" size={20} className="mr-2 animate-spin" />–ê–Ω–∞–ª–∏–∑...</>
          ) : (
            <><Icon name="Smile" size={20} className="mr-2" />–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å</>
          )}
        </Button>
      </Card>
    </div>
  );
};

export default DemoTab;
